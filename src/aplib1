 decompress      ; A=0
                sta lenH
                lda load_ptr
                sta dest
                sta dest_ap
                lda load_ptr+1
                sta dest+1
                sta dest_ap+1

                jsr    _GET_BYTE       ; ID kompresora - dla LZ4 = 0       aPLib = 1
                cmp    #0
                beq    unlz4
                cmp    #1
                bne    *               ; JAM if not LZ4 nor aPLib
                jmp    aPL_depack

; ------------------------------------------------------------------
; ------------------------------------------------------------------
; ------------------------------------------------------------------

unlz4
                  jsr    _GET_BYTE                  ; length of literals
                  sta    token
               :4 lsr
                  beq    read_offset                     ; there is no literal
                  cmp    #$0f
                  jsr    getlength
literals          jsr    _GET_BYTE
                  jsr    store
                  bne    literals
read_offset       jsr    _GET_BYTE
                  tay
                  sec
                  eor    #$ff
                  adc    dest
                  sta    src
                  tya
                  php
                  jsr    _GET_BYTE
                  plp
                  bne    not_done
                  tay
                  beq    unlz4_wroc  ; ----------------------------------------
not_done          eor    #$ff
                  adc    dest+1
                  sta    src+1
                  ; c=1
                  lda    #$ff
token             equ    *-1
                  and    #$0f
                  adc    #$03                            ; 3+1=4
                  cmp    #$13
                  jsr    getLength

@                 lda    $ffff
src               equ    *-2
                  inw    src
                  jsr    store
                  bne    @-
                  beq    unlz4                           ; zawsze
store             sta    $ffff
dest              equ    *-2                    ; load_ptr
                  inw    dest
                  dec    lenL
                  bne    @+ ;unlz4_done
                  dec    lenH
@                 rts
getLength_next    jsr    _GET_BYTE
                  tay
                  clc
                  adc    #$00
lenL              equ    *-1
                  bcc    @+
                  inc    lenH
@                 iny
getLength         sta    lenL
                  beq    getLength_next
                  tay
                  beq    @+
                  inc    lenH
@                 rts
;lenH              .byte    $00

; ------------------------------------------------------------------
; ------------------------------------------------------------------
; ------------------------------------------------------------------


aPL_depack        lda    #$80
                  sta    token_ap

literal           lsr    bl              ; c=0  bl=2

                  jsr    _GET_BYTE
write             jsr    store_ap

nxt_token         jsr    get_token_bit
                  bcc    literal                      ; literal     -> 0                                 bl=2       c0

                  jsr    get_token_bit
                  bcc    block                        ; block       -> 10          offs                  bl=1       c1

                  jsr    get_token_bit
                  bcc    short_block                  ; short block -> 110         offs                  bl=1       c1
                                                      ; single byte -> 111
single_byte       lsr    bl      ; c=0        bl=2

                  lda    #$10
@                 pha
                  jsr    get_token_bit
                  pla
                  rol    @
                  bcc    @-
                  beq    write

                  jmp    len01

aPL_done          jmp aPL_depack_wroc   ; unlz4_wroc  ; ----------------------------------------

short_block       jsr    _GET_BYTE
              lsr    @
              beq     aPL_done
              sta    EBPL           ; last offset
              ldx    #0
              stx    EBPH         ; last offset
                  ldx    #$02
                  bcc    @+
                  inx
@
                  sec
                  ror     bl     ; c=1      bl=1

                  jmp    len0203


block             jsr    getgamma
                  dex    ;CL                  ; wystarcz mlodszy bajt     -1
                  lda    #$ff                 ; c=0 for 2     c=1 for 1
bl                equ    *-1
                  bmi    normalcodepair ;@+
                  dex
@                 bne    normalcodepair
                  jsr    getgamma

                  lda    #$ff                             ; moze byc niezainicjowane?
EBPL              equ    *-1
                  sta    offsetL
                  lda    #$ff
EBPH              equ    *-1
                  sta    offsetH

                  jmp    lenffff

normalcodepair      ; normalblock
                  dex
                  stx    offsetH
                  stx    EBPH                     ; offs
                  jsr    _GET_BYTE
                  sta    offsetL
                  sta    EBPL                     ; offs
                  jsr    getgamma
                  lda    offsetH
                  beq    _ceck7f
                  cmp    #$7d     ; 32000
                  bcs     plus2
                  cmp    #$05     ; 1280
                  bcs     plus1
                  bcc    normal1               ; zawsze
_ceck7f           lda     offsetL                                  ;
                  bmi    normal1

plus2
                  inx    ;CL
                  bne    @+
                  iny    ;CH
@
plus1
                  inx    ;CL
                  bne    @+
                  iny    ;CH
@
normal1
lenffff           iny                ; hi+1
                  sec
                  ror    bl     ; c=1      bl=1
                  bne    domatch   ;          zawsze


getgamma
                  lda    #$00       ; CL/CH
                  pha
                  lda    #$01
                  pha
@              jsr     get_token_bit          ; bit informacji dla ecx
                  tsx
                  rol    $101,x
                  rol    $102,x
              jsr     get_token_bit          ; bit czy jeszcze sa informacje
              bcs     @-
                  pla
                  tax
                  pla
                  tay
              rts

;                  ldy #0
;                  sty ECXH
;                  iny
;                  sty ECXL
;@              jsr     get_token_bit          ; bit informacji dla ecx
;                  rol     ECXL
;              rol     ECXH
;              jsr     get_token_bit          ; bit czy jeszcze sa informacje
;              bcs     @-
;                  ldy #     ; H
;ECXH equ *-1
;                  ldx #     ; L
;ECXL equ *-1
;                  rts

get_token_bit     lda    #$ff
token_ap          equ    *-1
                  asl    @
                  bne    @+
                  php
                  jsr    _GET_BYTE
                  plp
                  rol    @
@                 sta    token_ap
                  rts

store_ap          sta    $ffff
dest_ap           equ    *-2
                  inw    dest_ap
                  rts

;--------------------------------
len01             ldx    #$01
len0203           ldy    #$01
                  sta    offsetL
                  lda    #0
                  sta    offsetH
;--------------------------------
domatch           lda    dest_ap
                  sec           ;c=1
                  sbc    #$ff
offsetL           equ    *-1
                  sta    src_ap
                  lda    dest_ap+1
                  sbc    #$ff
offsetH           equ    *-1
                  sta    src_ap+1
;--------------------------------
source            lda    $ffff
src_ap               equ    *-2
                  inw    src_ap
;--------------------------------
                  jsr    store_ap
;--------------------------------
                  dex                ; L
                  bne    source
                  dey                ; H
;--------------------------------
                  bne    source
;--------------------------------
                  jmp    nxt_token 
