;  cloader - Config loader for FujiNet
;    loads CONFIG.COM with high speed SIO and does in-line decompression with ZX0
;
;  2021 apc.atari@gmail.com
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

.IF .DEF PARTHI
; get labels from low speed part
	.OPT NO OBJ
        .include "zx0boot.src"
        .include "cloader-lo.src"
	.OPT OBJ
.ENDIF


        .BANK
        * = CLLOEND

SETDLIST
; setup our Display List
        LDA #0
        STA $D40E       ; disable NMI
        STA $D400       ; disable DMA
        LDA $230
        STA DLSAV
        LDA $231
        STA DLSAV+1
        LDA #<DLIST
        STA $230
        LDA #>DLIST
        STA $231
        LDA #$21        ; narrow play field
        STA $22F        ; shadow of DMACTL
        LDA BOOTOPT
        BEQ ?SKIP       ; -> Select pressed, skip colors
?COLRS  LDY #0+4        ; offset to NTSC colors (end)
        LDX $D014       ; 1 for PAL GTIA, 15 for NTSC
        DEX
        BNE ?NTSC
        LDY #5+4        ; offset to PAL colors (end)
?NTSC   JSR SETCLRS

?SKIP   LDX $14
        LDA #$C0
        STA $D40E       ; re-enable NMI
?WVBI   CPX $14
        BEQ ?WVBI       ; wait a bit before starting SIO calls (with critical flag set)
        RTS

LOACFG
; patch loader to support hybrid file hints (2DF-2E1)
        LDA #<(HYBLOAD-1)
        STA RFINITL
        LDA #>(HYBLOAD-1)
        STA RFINITH
        ; reset hint byte
        LDA #$FF
        STA $2DF
.IF .DEF LOADBAR
; patch loader to update progress bar
        LDA #<RREADPB
        STA JMPSIO+1
        LDA #>RREADPB
        STA JMPSIO+2
.ENDIF
; after load continue at CLEANUP
        LDA #<CLNVEC
        STA JMPRUNV+1
        LDA #>CLNVEC
        STA JMPRUNV+2
; load Config
	LDY CFGSSEC     ; Config start sector
	LDA CFGSSEC+1
        JMP DOLOAD

CLEANUP
; some cleanup here
;
; restore Display List
        LDA #0
.IF .NOT .DEF RESTOREDMA
        ; keep DMA disabled to avoid "blink" when restoring to original DLIST
        ; loaded program must re-enable it! (CONFIG.COM does)
        STA $22F        ; shadow of DMACTL
.ENDIF
        STA $D40E       ; disable NMI
        STA $D400       ; disable DMA
        LDA DLSAV
        STA $230
        LDA DLSAV+1
        STA $231
.IF .DEF RESTOREDMA
        LDA #$22        ; standard play field
        STA $22F        ; shadow of DMACTL
        ; restore colors
        LDY #RESTCOLORS-COLORS+4	; offset to restore colors (end)
        JSR SETCLRS
.ENDIF
        LDA #3
        STA $41         ; audible SIO
;        LDX $14
        LDA #$C0
        STA $D40E       ; re-enable NMI
;?WVBI2  CPX $14
;        BEQ ?WVBI2      ; wait for next completed VBI
        ; start Config
        JMP (RUNAD)


HYBLOAD
; hybrid file loader
        LDX #$FF
        LDA $2DF
        BNE ?HL1
        ; 0 = stop loading and run programm
        JMP RUN_IT
?HL1    CMP #1
        BNE ?HL2
        ; reset hint byte
        STX $2DF
        ; 1 = next segment is compressed
        ; ignore next 4 bytes = segment start,end addresses for DOS
        JSR GET_BYTE
        JSR GET_BYTE
        JSR GET_BYTE
        JSR GET_BYTE
        ; load and decompress data to address in 2E0-2E1
        LDA $2E0
        STA LOAD_PTR
        LDA $2E1
        STA LOAD_PTR+1
        LDA #0
        JMP DZX0_STANDARD ; A = 0
?HL2    ; no hint recognized , continue loading
        JMP LOAD1


.IF .DEF LOADBAR
; progress bar update + read sector
RREADPB CLC
?TB2    LDA PBSF
        ADC SEC2PB
        STA SEC2PB
        LDA PBSF+1
        ADC SEC2PB+1
        STA SEC2PB+1
        BEQ ?JRR
; update progress bar
?UP2    LDX PBOF
        CPX #12
        BCS ?JRR
        LDA PBAR,X
        EOR PBMASK
        STA PBAR,X
        LDA PBMASK
        LSR A
        ROR A
        BCC ?UP1
        ROR A
        INC PBOF
?UP1    STA PBMASK
        DEC SEC2PB+1
        BNE ?UP2
?JRR    JMP NE459
.ENDIF

; Display List
.IF .DEF BANNERSIZE
    .IF BANNERSIZE = 1
        BROWS .= 32
    .ENDIF
    .IF BANNERSIZE = 2
        BROWS .= 64
    .ENDIF
    .IF BANNERSIZE = 3
        BROWS .= 125
    .ENDIF
    .IF .NOT .DEF BROWS
       .ERROR "Invalid banner size (BANNERSIZE)"
    .ENDIF
.ELSE
     BROWS .= 32             ; default, 32 rows of banner bitmap
.ENDIF

; .IF .DEF BANNERMODE
;     BAM .= BANNERMODE        ; Antic mode for banner bitmap
; .ELSE
;     BAM .= 15                ; default, mode F, hi-res mono
; .ENDIF

.IF BAM = 0
        BROWS .= 0
.ENDIF

; 1K boundary when large DLIST is used
.IF * > $0B7A .AND * < $0C00 .AND BROWS >= 125
        .DC (256-(*&255)) 0
        .WARN "Added padding for Display List"
.ENDIF

DLIST   .BYTE 112, 112, 112, 112
.IF BAM = 0
        ; no banner
        .DC 8 112
.ELSE
        .DC 4-(BROWS+3)/32 112
        ; banner area
        .BYTE 64+BAM, <BANNERVRAM, >BANNERVRAM  ; firts row
        .DC BROWS-1 BAM                 ; remaining rows
.ENDIF
        .DC 2-BROWS/125 112
.IF .DEF LOADBAR
        ; progress bar area
        .BYTE 64+13, <PBARVRAM, >PBARVRAM
.ENDIF
        .BYTE 65, <DLIST, >DLIST

.IF .DEF LOADBAR
; Video RAM with progress bar
; Row with progress bar
PBARVRAM .DC 10 0
PBAR     .DC 12 $55
         .DC 10 0
.ENDIF

LOADEREND = *

        .BANK
	* = $02E0
; RUN address
	.WORD LOACFG
; Init address
	;* = $02E2
	.WORD SETDLIST

.IF BAM <> 0
; Banner bitmap
    .IF .NOT .DEF BANNERLOAD
        BANNERLOAD = LOADEREND
    .ENDIF
        .BANK
        * = BANNERLOAD
    BANNERVRAM
        .incbin "../data/banner.dat"
.ENDIF
