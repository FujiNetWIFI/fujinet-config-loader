; ZX0 boot - zx0 boot loader
;
; ZX0 decompressor for 6502 - https://xxl.atari.pl/zx0-decompressor/
; ZX0 project - https://github.com/einar-saukas/ZX0
;
; ATASM version for FujiNet Config Loader
; 2021 apc.atari@gmail.com
;--------------------------------------------------

LOADSECT        = 4             ; sector to start loading from

RUNAD           = $2E0
INITAD          = $2E2
         
; useful labels
	.include "hisio.inc"
        
; DDEVIC          = $300
; DUNIT           = $301
; DCOMND          = $302
; DSTATS          = $303
; DBUFLO          = $304
; DBUFHI          = $305
; DTIMLO          = $306
; DBYTLO          = $308
; DBYTHI          = $309
; DAUX1           = $30A
; DAUX2           = $30B

UNPAC_PTR       = $43
LOAD_PTR        = $45
LOAD_END        = $47

BUFFER_OFS      = $49           ; offset to current byte
BUFFER          = $400          ; sector buffer

.IF .DEF DOUBLEDENSITY
sectsiz	= $100
.ELSE
sectsiz	= $80
.ENDIF

;--------------------------------------------------

BOOTSTART = BUFFER+sectsiz

        * = BOOTSTART

	.BYTE $78
	.BYTE (BOOTEND-BOOTSTART+127)/128
	.WORD BOOTSTART
        .WORD $E477

;--------------------------------------------------
; Adjust DBYTLO/DBYTHI according to sector size
; $80 for SD (default), $100 for DD
.IF sectsiz=$100
	ASL DBYTLO
	ROL DBYTHI
.ENDIF
        LDY #>BUFFER            ; #4
        LDA #<BUFFER            ; #0
        STY DBUFHI
        STA DBUFLO

; early screen off
; This can be moved to cloader, if space is missing for something more important.
.IF <BUFFER <> 0
        .ERROR "BUFFER is not page aligned!"
.ENDIF
        ; disable DMA, will be re-enabled later
        ; A = 0
        STA $22F                ; DMACTL shadow
        STA $D400               ; and DMACTL, due to SIO (critical flag) NMI may not set this soon

; Resulting code for DD was too big,
; fortunately BUFFER $0400 = swapped LOADSECT $0004.
.IF >BUFFER <> <LOADSECT .OR <BUFFER <> >LOADSECT
        .WARN "Cannot save space here. A,X have to be loaded."
        LDY #<LOADSECT
        LDA #>LOADSECT
.ENDIF

DOLOAD
        ; in: A,Y sector number
        JSR READ_SECTOR
        LDY #$00
        STY BUFFER_OFS
LOAD1
        JSR GET_BYTE
        BMI RUN_IT
        STA LOAD_PTR
        JSR GET_BYTE
        STA LOAD_PTR+1
        AND LOAD_PTR
        CMP #$FF
        BEQ LOAD1

        LDA #<DO_RTS
        STA INITAD
        LDA #>DO_RTS
        STA INITAD+1
        JSR GET_BYTE
        STA LOAD_END
        JSR GET_BYTE
        STA LOAD_END+1
        ORA LOAD_END
        BEQ DZX0_STANDARD
?LOAD2
        JSR GET_BYTE
        LDY #$00
        STA (LOAD_PTR),Y
        LDY LOAD_PTR
        LDA LOAD_PTR+1
        INC LOAD_PTR
        BNE ?LO1
        INC LOAD_PTR+1
?LO1
        CPY LOAD_END
        SBC LOAD_END+1
        BCC ?LOAD2

CALL_INIT
        LDA #>(LOAD1-1)
RFINITH = *-1
        PHA
        LDA #<(LOAD1-1)
RFINITL = *-1
        PHA
        JMP (INITAD)
;--------------------------------------------------
RUN_IT
        LDA #$01
        STA $09
JMPRUNV JMP (RUNAD)

;--------------------------------------------------

        .include "dzx0.src"

;--------------------------------------------------

        ; sector padding
	.IF ((*-BOOTSTART)&127)<>0
	.DC (128-((*-BOOTSTART)&127)) 0
	.ENDIF

        ; we need to fit into first 3 sectors
	.IF ((*-BOOTSTART)/128)>3
        .ERROR "Boot code is too big!"
	.ENDIF

BOOTEND	= *
